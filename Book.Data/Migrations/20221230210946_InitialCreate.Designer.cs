// <auto-generated />
using System;
using GoSolve.Dummy.Book.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoSolve.Dummy.Book.Data.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20221230210946_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoSolve.Dummy.Book.Data.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AmountOfPages")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("GoSolve.Dummy.Book.Data.Models.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020),
                            Description = "Narrative storytelling with imaginary characters and events.",
                            Name = "Fiction",
                            UpdatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020),
                            Description = "Narrative storytelling based on real events and factual information.",
                            Name = "Non-fiction",
                            UpdatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020),
                            Description = "Narrative storytelling involving a crime or puzzle to be solved.",
                            Name = "Mystery",
                            UpdatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020),
                            Description = "Narrative storytelling centered on the romantic relationships of the characters.",
                            Name = "Romance",
                            UpdatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020),
                            Description = "Narrative storytelling set in the future or in an alternative reality and involving scientific or technological elements.",
                            Name = "Science fiction",
                            UpdatedAt = new DateTime(2022, 12, 30, 21, 9, 46, 807, DateTimeKind.Utc).AddTicks(7020)
                        });
                });

            modelBuilder.Entity("GoSolve.Dummy.Book.Data.Models.Book", b =>
                {
                    b.HasOne("GoSolve.Dummy.Book.Data.Models.BookGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });
#pragma warning restore 612, 618
        }
    }
}
